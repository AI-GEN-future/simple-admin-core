// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-core/pkg/ent/dictionary"
	"github.com/suyuan32/simple-admin-core/pkg/ent/dictionarydetail"
	"github.com/suyuan32/simple-admin-core/pkg/ent/predicate"
	"github.com/suyuan32/simple-admin-core/pkg/gotype"
)

// DictionaryUpdate is the builder for updating Dictionary entities.
type DictionaryUpdate struct {
	config
	hooks    []Hook
	mutation *DictionaryMutation
}

// Where appends a list predicates to the DictionaryUpdate builder.
func (du *DictionaryUpdate) Where(ps ...predicate.Dictionary) *DictionaryUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DictionaryUpdate) SetUpdatedAt(t time.Time) *DictionaryUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetStatus sets the "status" field.
func (du *DictionaryUpdate) SetStatus(_go gotype.Status) *DictionaryUpdate {
	du.mutation.ResetStatus()
	du.mutation.SetStatus(_go)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DictionaryUpdate) SetNillableStatus(_go *gotype.Status) *DictionaryUpdate {
	if _go != nil {
		du.SetStatus(*_go)
	}
	return du
}

// AddStatus adds _go to the "status" field.
func (du *DictionaryUpdate) AddStatus(_go gotype.Status) *DictionaryUpdate {
	du.mutation.AddStatus(_go)
	return du
}

// ClearStatus clears the value of the "status" field.
func (du *DictionaryUpdate) ClearStatus() *DictionaryUpdate {
	du.mutation.ClearStatus()
	return du
}

// SetTitle sets the "title" field.
func (du *DictionaryUpdate) SetTitle(s string) *DictionaryUpdate {
	du.mutation.SetTitle(s)
	return du
}

// SetName sets the "name" field.
func (du *DictionaryUpdate) SetName(s string) *DictionaryUpdate {
	du.mutation.SetName(s)
	return du
}

// SetDesc sets the "desc" field.
func (du *DictionaryUpdate) SetDesc(s string) *DictionaryUpdate {
	du.mutation.SetDesc(s)
	return du
}

// AddDetailIDs adds the "details" edge to the DictionaryDetail entity by IDs.
func (du *DictionaryUpdate) AddDetailIDs(ids ...uint64) *DictionaryUpdate {
	du.mutation.AddDetailIDs(ids...)
	return du
}

// AddDetails adds the "details" edges to the DictionaryDetail entity.
func (du *DictionaryUpdate) AddDetails(d ...*DictionaryDetail) *DictionaryUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddDetailIDs(ids...)
}

// Mutation returns the DictionaryMutation object of the builder.
func (du *DictionaryUpdate) Mutation() *DictionaryMutation {
	return du.mutation
}

// ClearDetails clears all "details" edges to the DictionaryDetail entity.
func (du *DictionaryUpdate) ClearDetails() *DictionaryUpdate {
	du.mutation.ClearDetails()
	return du
}

// RemoveDetailIDs removes the "details" edge to DictionaryDetail entities by IDs.
func (du *DictionaryUpdate) RemoveDetailIDs(ids ...uint64) *DictionaryUpdate {
	du.mutation.RemoveDetailIDs(ids...)
	return du
}

// RemoveDetails removes "details" edges to DictionaryDetail entities.
func (du *DictionaryUpdate) RemoveDetails(d ...*DictionaryDetail) *DictionaryUpdate {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveDetailIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DictionaryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	du.defaults()
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictionaryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DictionaryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DictionaryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DictionaryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DictionaryUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := dictionary.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

func (du *DictionaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dictionary.Table,
			Columns: dictionary.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: dictionary.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(dictionary.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := du.mutation.AddedStatus(); ok {
		_spec.AddField(dictionary.FieldStatus, field.TypeUint8, value)
	}
	if du.mutation.StatusCleared() {
		_spec.ClearField(dictionary.FieldStatus, field.TypeUint8)
	}
	if value, ok := du.mutation.Title(); ok {
		_spec.SetField(dictionary.FieldTitle, field.TypeString, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(dictionary.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Desc(); ok {
		_spec.SetField(dictionary.FieldDesc, field.TypeString, value)
	}
	if du.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DetailsTable,
			Columns: []string{dictionary.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: dictionarydetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !du.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DetailsTable,
			Columns: []string{dictionary.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: dictionarydetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DetailsTable,
			Columns: []string{dictionary.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: dictionarydetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DictionaryUpdateOne is the builder for updating a single Dictionary entity.
type DictionaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DictionaryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DictionaryUpdateOne) SetUpdatedAt(t time.Time) *DictionaryUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetStatus sets the "status" field.
func (duo *DictionaryUpdateOne) SetStatus(_go gotype.Status) *DictionaryUpdateOne {
	duo.mutation.ResetStatus()
	duo.mutation.SetStatus(_go)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DictionaryUpdateOne) SetNillableStatus(_go *gotype.Status) *DictionaryUpdateOne {
	if _go != nil {
		duo.SetStatus(*_go)
	}
	return duo
}

// AddStatus adds _go to the "status" field.
func (duo *DictionaryUpdateOne) AddStatus(_go gotype.Status) *DictionaryUpdateOne {
	duo.mutation.AddStatus(_go)
	return duo
}

// ClearStatus clears the value of the "status" field.
func (duo *DictionaryUpdateOne) ClearStatus() *DictionaryUpdateOne {
	duo.mutation.ClearStatus()
	return duo
}

// SetTitle sets the "title" field.
func (duo *DictionaryUpdateOne) SetTitle(s string) *DictionaryUpdateOne {
	duo.mutation.SetTitle(s)
	return duo
}

// SetName sets the "name" field.
func (duo *DictionaryUpdateOne) SetName(s string) *DictionaryUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetDesc sets the "desc" field.
func (duo *DictionaryUpdateOne) SetDesc(s string) *DictionaryUpdateOne {
	duo.mutation.SetDesc(s)
	return duo
}

// AddDetailIDs adds the "details" edge to the DictionaryDetail entity by IDs.
func (duo *DictionaryUpdateOne) AddDetailIDs(ids ...uint64) *DictionaryUpdateOne {
	duo.mutation.AddDetailIDs(ids...)
	return duo
}

// AddDetails adds the "details" edges to the DictionaryDetail entity.
func (duo *DictionaryUpdateOne) AddDetails(d ...*DictionaryDetail) *DictionaryUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddDetailIDs(ids...)
}

// Mutation returns the DictionaryMutation object of the builder.
func (duo *DictionaryUpdateOne) Mutation() *DictionaryMutation {
	return duo.mutation
}

// ClearDetails clears all "details" edges to the DictionaryDetail entity.
func (duo *DictionaryUpdateOne) ClearDetails() *DictionaryUpdateOne {
	duo.mutation.ClearDetails()
	return duo
}

// RemoveDetailIDs removes the "details" edge to DictionaryDetail entities by IDs.
func (duo *DictionaryUpdateOne) RemoveDetailIDs(ids ...uint64) *DictionaryUpdateOne {
	duo.mutation.RemoveDetailIDs(ids...)
	return duo
}

// RemoveDetails removes "details" edges to DictionaryDetail entities.
func (duo *DictionaryUpdateOne) RemoveDetails(d ...*DictionaryDetail) *DictionaryUpdateOne {
	ids := make([]uint64, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveDetailIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DictionaryUpdateOne) Select(field string, fields ...string) *DictionaryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dictionary entity.
func (duo *DictionaryUpdateOne) Save(ctx context.Context) (*Dictionary, error) {
	var (
		err  error
		node *Dictionary
	)
	duo.defaults()
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictionaryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Dictionary)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DictionaryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DictionaryUpdateOne) SaveX(ctx context.Context) *Dictionary {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DictionaryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DictionaryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DictionaryUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := dictionary.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

func (duo *DictionaryUpdateOne) sqlSave(ctx context.Context) (_node *Dictionary, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dictionary.Table,
			Columns: dictionary.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: dictionary.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dictionary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictionary.FieldID)
		for _, f := range fields {
			if !dictionary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictionary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(dictionary.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(dictionary.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := duo.mutation.AddedStatus(); ok {
		_spec.AddField(dictionary.FieldStatus, field.TypeUint8, value)
	}
	if duo.mutation.StatusCleared() {
		_spec.ClearField(dictionary.FieldStatus, field.TypeUint8)
	}
	if value, ok := duo.mutation.Title(); ok {
		_spec.SetField(dictionary.FieldTitle, field.TypeString, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(dictionary.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Desc(); ok {
		_spec.SetField(dictionary.FieldDesc, field.TypeString, value)
	}
	if duo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DetailsTable,
			Columns: []string{dictionary.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: dictionarydetail.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDetailsIDs(); len(nodes) > 0 && !duo.mutation.DetailsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DetailsTable,
			Columns: []string{dictionary.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: dictionarydetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DetailsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dictionary.DetailsTable,
			Columns: []string{dictionary.DetailsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: dictionarydetail.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dictionary{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictionary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
