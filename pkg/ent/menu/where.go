// Code generated by ent, DO NOT EDIT.

package menu

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/suyuan32/simple-admin-core/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// MenuLevel applies equality check predicate on the "menu_level" field. It's identical to MenuLevelEQ.
func MenuLevel(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuLevel), v))
	})
}

// MenuType applies equality check predicate on the "menu_type" field. It's identical to MenuTypeEQ.
func MenuType(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuType), v))
	})
}

// Path applies equality check predicate on the "path" field. It's identical to PathEQ.
func Path(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Redirect applies equality check predicate on the "redirect" field. It's identical to RedirectEQ.
func Redirect(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedirect), v))
	})
}

// Component applies equality check predicate on the "component" field. It's identical to ComponentEQ.
func Component(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComponent), v))
	})
}

// OrderNo applies equality check predicate on the "order_no" field. It's identical to OrderNoEQ.
func OrderNo(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNo), v))
	})
}

// Disabled applies equality check predicate on the "disabled" field. It's identical to DisabledEQ.
func Disabled(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisabled), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Icon applies equality check predicate on the "icon" field. It's identical to IconEQ.
func Icon(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// HideMenu applies equality check predicate on the "hide_menu" field. It's identical to HideMenuEQ.
func HideMenu(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideMenu), v))
	})
}

// HideBreadcrumb applies equality check predicate on the "hide_breadcrumb" field. It's identical to HideBreadcrumbEQ.
func HideBreadcrumb(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideBreadcrumb), v))
	})
}

// CurrentActiveMenu applies equality check predicate on the "current_active_menu" field. It's identical to CurrentActiveMenuEQ.
func CurrentActiveMenu(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentActiveMenu), v))
	})
}

// IgnoreKeepAlive applies equality check predicate on the "ignore_keep_alive" field. It's identical to IgnoreKeepAliveEQ.
func IgnoreKeepAlive(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIgnoreKeepAlive), v))
	})
}

// HideTab applies equality check predicate on the "hide_tab" field. It's identical to HideTabEQ.
func HideTab(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideTab), v))
	})
}

// FrameSrc applies equality check predicate on the "frame_src" field. It's identical to FrameSrcEQ.
func FrameSrc(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrameSrc), v))
	})
}

// CarryParam applies equality check predicate on the "carry_param" field. It's identical to CarryParamEQ.
func CarryParam(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarryParam), v))
	})
}

// HideChildrenInMenu applies equality check predicate on the "hide_children_in_menu" field. It's identical to HideChildrenInMenuEQ.
func HideChildrenInMenu(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideChildrenInMenu), v))
	})
}

// Affix applies equality check predicate on the "affix" field. It's identical to AffixEQ.
func Affix(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAffix), v))
	})
}

// DynamicLevel applies equality check predicate on the "dynamic_level" field. It's identical to DynamicLevelEQ.
func DynamicLevel(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDynamicLevel), v))
	})
}

// RealPath applies equality check predicate on the "real_path" field. It's identical to RealPathEQ.
func RealPath(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRealPath), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldParentID), v))
	})
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uint64) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldParentID), v))
	})
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uint64) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldParentID), v...))
	})
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uint64) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldParentID), v...))
	})
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldParentID)))
	})
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldParentID)))
	})
}

// MenuLevelEQ applies the EQ predicate on the "menu_level" field.
func MenuLevelEQ(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuLevel), v))
	})
}

// MenuLevelNEQ applies the NEQ predicate on the "menu_level" field.
func MenuLevelNEQ(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMenuLevel), v))
	})
}

// MenuLevelIn applies the In predicate on the "menu_level" field.
func MenuLevelIn(vs ...uint32) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMenuLevel), v...))
	})
}

// MenuLevelNotIn applies the NotIn predicate on the "menu_level" field.
func MenuLevelNotIn(vs ...uint32) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMenuLevel), v...))
	})
}

// MenuLevelGT applies the GT predicate on the "menu_level" field.
func MenuLevelGT(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMenuLevel), v))
	})
}

// MenuLevelGTE applies the GTE predicate on the "menu_level" field.
func MenuLevelGTE(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMenuLevel), v))
	})
}

// MenuLevelLT applies the LT predicate on the "menu_level" field.
func MenuLevelLT(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMenuLevel), v))
	})
}

// MenuLevelLTE applies the LTE predicate on the "menu_level" field.
func MenuLevelLTE(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMenuLevel), v))
	})
}

// MenuTypeEQ applies the EQ predicate on the "menu_type" field.
func MenuTypeEQ(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMenuType), v))
	})
}

// MenuTypeNEQ applies the NEQ predicate on the "menu_type" field.
func MenuTypeNEQ(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMenuType), v))
	})
}

// MenuTypeIn applies the In predicate on the "menu_type" field.
func MenuTypeIn(vs ...uint32) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMenuType), v...))
	})
}

// MenuTypeNotIn applies the NotIn predicate on the "menu_type" field.
func MenuTypeNotIn(vs ...uint32) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMenuType), v...))
	})
}

// MenuTypeGT applies the GT predicate on the "menu_type" field.
func MenuTypeGT(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMenuType), v))
	})
}

// MenuTypeGTE applies the GTE predicate on the "menu_type" field.
func MenuTypeGTE(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMenuType), v))
	})
}

// MenuTypeLT applies the LT predicate on the "menu_type" field.
func MenuTypeLT(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMenuType), v))
	})
}

// MenuTypeLTE applies the LTE predicate on the "menu_type" field.
func MenuTypeLTE(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMenuType), v))
	})
}

// PathEQ applies the EQ predicate on the "path" field.
func PathEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPath), v))
	})
}

// PathNEQ applies the NEQ predicate on the "path" field.
func PathNEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPath), v))
	})
}

// PathIn applies the In predicate on the "path" field.
func PathIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPath), v...))
	})
}

// PathNotIn applies the NotIn predicate on the "path" field.
func PathNotIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPath), v...))
	})
}

// PathGT applies the GT predicate on the "path" field.
func PathGT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPath), v))
	})
}

// PathGTE applies the GTE predicate on the "path" field.
func PathGTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPath), v))
	})
}

// PathLT applies the LT predicate on the "path" field.
func PathLT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPath), v))
	})
}

// PathLTE applies the LTE predicate on the "path" field.
func PathLTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPath), v))
	})
}

// PathContains applies the Contains predicate on the "path" field.
func PathContains(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPath), v))
	})
}

// PathHasPrefix applies the HasPrefix predicate on the "path" field.
func PathHasPrefix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPath), v))
	})
}

// PathHasSuffix applies the HasSuffix predicate on the "path" field.
func PathHasSuffix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPath), v))
	})
}

// PathIsNil applies the IsNil predicate on the "path" field.
func PathIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPath)))
	})
}

// PathNotNil applies the NotNil predicate on the "path" field.
func PathNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPath)))
	})
}

// PathEqualFold applies the EqualFold predicate on the "path" field.
func PathEqualFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPath), v))
	})
}

// PathContainsFold applies the ContainsFold predicate on the "path" field.
func PathContainsFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPath), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// RedirectEQ applies the EQ predicate on the "redirect" field.
func RedirectEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRedirect), v))
	})
}

// RedirectNEQ applies the NEQ predicate on the "redirect" field.
func RedirectNEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRedirect), v))
	})
}

// RedirectIn applies the In predicate on the "redirect" field.
func RedirectIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRedirect), v...))
	})
}

// RedirectNotIn applies the NotIn predicate on the "redirect" field.
func RedirectNotIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRedirect), v...))
	})
}

// RedirectGT applies the GT predicate on the "redirect" field.
func RedirectGT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRedirect), v))
	})
}

// RedirectGTE applies the GTE predicate on the "redirect" field.
func RedirectGTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRedirect), v))
	})
}

// RedirectLT applies the LT predicate on the "redirect" field.
func RedirectLT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRedirect), v))
	})
}

// RedirectLTE applies the LTE predicate on the "redirect" field.
func RedirectLTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRedirect), v))
	})
}

// RedirectContains applies the Contains predicate on the "redirect" field.
func RedirectContains(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRedirect), v))
	})
}

// RedirectHasPrefix applies the HasPrefix predicate on the "redirect" field.
func RedirectHasPrefix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRedirect), v))
	})
}

// RedirectHasSuffix applies the HasSuffix predicate on the "redirect" field.
func RedirectHasSuffix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRedirect), v))
	})
}

// RedirectIsNil applies the IsNil predicate on the "redirect" field.
func RedirectIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRedirect)))
	})
}

// RedirectNotNil applies the NotNil predicate on the "redirect" field.
func RedirectNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRedirect)))
	})
}

// RedirectEqualFold applies the EqualFold predicate on the "redirect" field.
func RedirectEqualFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRedirect), v))
	})
}

// RedirectContainsFold applies the ContainsFold predicate on the "redirect" field.
func RedirectContainsFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRedirect), v))
	})
}

// ComponentEQ applies the EQ predicate on the "component" field.
func ComponentEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComponent), v))
	})
}

// ComponentNEQ applies the NEQ predicate on the "component" field.
func ComponentNEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComponent), v))
	})
}

// ComponentIn applies the In predicate on the "component" field.
func ComponentIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldComponent), v...))
	})
}

// ComponentNotIn applies the NotIn predicate on the "component" field.
func ComponentNotIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldComponent), v...))
	})
}

// ComponentGT applies the GT predicate on the "component" field.
func ComponentGT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComponent), v))
	})
}

// ComponentGTE applies the GTE predicate on the "component" field.
func ComponentGTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComponent), v))
	})
}

// ComponentLT applies the LT predicate on the "component" field.
func ComponentLT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComponent), v))
	})
}

// ComponentLTE applies the LTE predicate on the "component" field.
func ComponentLTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComponent), v))
	})
}

// ComponentContains applies the Contains predicate on the "component" field.
func ComponentContains(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComponent), v))
	})
}

// ComponentHasPrefix applies the HasPrefix predicate on the "component" field.
func ComponentHasPrefix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComponent), v))
	})
}

// ComponentHasSuffix applies the HasSuffix predicate on the "component" field.
func ComponentHasSuffix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComponent), v))
	})
}

// ComponentIsNil applies the IsNil predicate on the "component" field.
func ComponentIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComponent)))
	})
}

// ComponentNotNil applies the NotNil predicate on the "component" field.
func ComponentNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComponent)))
	})
}

// ComponentEqualFold applies the EqualFold predicate on the "component" field.
func ComponentEqualFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComponent), v))
	})
}

// ComponentContainsFold applies the ContainsFold predicate on the "component" field.
func ComponentContainsFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComponent), v))
	})
}

// OrderNoEQ applies the EQ predicate on the "order_no" field.
func OrderNoEQ(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderNo), v))
	})
}

// OrderNoNEQ applies the NEQ predicate on the "order_no" field.
func OrderNoNEQ(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderNo), v))
	})
}

// OrderNoIn applies the In predicate on the "order_no" field.
func OrderNoIn(vs ...uint32) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderNo), v...))
	})
}

// OrderNoNotIn applies the NotIn predicate on the "order_no" field.
func OrderNoNotIn(vs ...uint32) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderNo), v...))
	})
}

// OrderNoGT applies the GT predicate on the "order_no" field.
func OrderNoGT(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderNo), v))
	})
}

// OrderNoGTE applies the GTE predicate on the "order_no" field.
func OrderNoGTE(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderNo), v))
	})
}

// OrderNoLT applies the LT predicate on the "order_no" field.
func OrderNoLT(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderNo), v))
	})
}

// OrderNoLTE applies the LTE predicate on the "order_no" field.
func OrderNoLTE(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderNo), v))
	})
}

// DisabledEQ applies the EQ predicate on the "disabled" field.
func DisabledEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisabled), v))
	})
}

// DisabledNEQ applies the NEQ predicate on the "disabled" field.
func DisabledNEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisabled), v))
	})
}

// DisabledIsNil applies the IsNil predicate on the "disabled" field.
func DisabledIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDisabled)))
	})
}

// DisabledNotNil applies the NotNil predicate on the "disabled" field.
func DisabledNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDisabled)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// IconEQ applies the EQ predicate on the "icon" field.
func IconEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIcon), v))
	})
}

// IconNEQ applies the NEQ predicate on the "icon" field.
func IconNEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIcon), v))
	})
}

// IconIn applies the In predicate on the "icon" field.
func IconIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIcon), v...))
	})
}

// IconNotIn applies the NotIn predicate on the "icon" field.
func IconNotIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIcon), v...))
	})
}

// IconGT applies the GT predicate on the "icon" field.
func IconGT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIcon), v))
	})
}

// IconGTE applies the GTE predicate on the "icon" field.
func IconGTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIcon), v))
	})
}

// IconLT applies the LT predicate on the "icon" field.
func IconLT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIcon), v))
	})
}

// IconLTE applies the LTE predicate on the "icon" field.
func IconLTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIcon), v))
	})
}

// IconContains applies the Contains predicate on the "icon" field.
func IconContains(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIcon), v))
	})
}

// IconHasPrefix applies the HasPrefix predicate on the "icon" field.
func IconHasPrefix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIcon), v))
	})
}

// IconHasSuffix applies the HasSuffix predicate on the "icon" field.
func IconHasSuffix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIcon), v))
	})
}

// IconEqualFold applies the EqualFold predicate on the "icon" field.
func IconEqualFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIcon), v))
	})
}

// IconContainsFold applies the ContainsFold predicate on the "icon" field.
func IconContainsFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIcon), v))
	})
}

// HideMenuEQ applies the EQ predicate on the "hide_menu" field.
func HideMenuEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideMenu), v))
	})
}

// HideMenuNEQ applies the NEQ predicate on the "hide_menu" field.
func HideMenuNEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHideMenu), v))
	})
}

// HideMenuIsNil applies the IsNil predicate on the "hide_menu" field.
func HideMenuIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHideMenu)))
	})
}

// HideMenuNotNil applies the NotNil predicate on the "hide_menu" field.
func HideMenuNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHideMenu)))
	})
}

// HideBreadcrumbEQ applies the EQ predicate on the "hide_breadcrumb" field.
func HideBreadcrumbEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideBreadcrumb), v))
	})
}

// HideBreadcrumbNEQ applies the NEQ predicate on the "hide_breadcrumb" field.
func HideBreadcrumbNEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHideBreadcrumb), v))
	})
}

// HideBreadcrumbIsNil applies the IsNil predicate on the "hide_breadcrumb" field.
func HideBreadcrumbIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHideBreadcrumb)))
	})
}

// HideBreadcrumbNotNil applies the NotNil predicate on the "hide_breadcrumb" field.
func HideBreadcrumbNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHideBreadcrumb)))
	})
}

// CurrentActiveMenuEQ applies the EQ predicate on the "current_active_menu" field.
func CurrentActiveMenuEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrentActiveMenu), v))
	})
}

// CurrentActiveMenuNEQ applies the NEQ predicate on the "current_active_menu" field.
func CurrentActiveMenuNEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrentActiveMenu), v))
	})
}

// CurrentActiveMenuIn applies the In predicate on the "current_active_menu" field.
func CurrentActiveMenuIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrentActiveMenu), v...))
	})
}

// CurrentActiveMenuNotIn applies the NotIn predicate on the "current_active_menu" field.
func CurrentActiveMenuNotIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrentActiveMenu), v...))
	})
}

// CurrentActiveMenuGT applies the GT predicate on the "current_active_menu" field.
func CurrentActiveMenuGT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrentActiveMenu), v))
	})
}

// CurrentActiveMenuGTE applies the GTE predicate on the "current_active_menu" field.
func CurrentActiveMenuGTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrentActiveMenu), v))
	})
}

// CurrentActiveMenuLT applies the LT predicate on the "current_active_menu" field.
func CurrentActiveMenuLT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrentActiveMenu), v))
	})
}

// CurrentActiveMenuLTE applies the LTE predicate on the "current_active_menu" field.
func CurrentActiveMenuLTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrentActiveMenu), v))
	})
}

// CurrentActiveMenuContains applies the Contains predicate on the "current_active_menu" field.
func CurrentActiveMenuContains(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCurrentActiveMenu), v))
	})
}

// CurrentActiveMenuHasPrefix applies the HasPrefix predicate on the "current_active_menu" field.
func CurrentActiveMenuHasPrefix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCurrentActiveMenu), v))
	})
}

// CurrentActiveMenuHasSuffix applies the HasSuffix predicate on the "current_active_menu" field.
func CurrentActiveMenuHasSuffix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCurrentActiveMenu), v))
	})
}

// CurrentActiveMenuIsNil applies the IsNil predicate on the "current_active_menu" field.
func CurrentActiveMenuIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrentActiveMenu)))
	})
}

// CurrentActiveMenuNotNil applies the NotNil predicate on the "current_active_menu" field.
func CurrentActiveMenuNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrentActiveMenu)))
	})
}

// CurrentActiveMenuEqualFold applies the EqualFold predicate on the "current_active_menu" field.
func CurrentActiveMenuEqualFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCurrentActiveMenu), v))
	})
}

// CurrentActiveMenuContainsFold applies the ContainsFold predicate on the "current_active_menu" field.
func CurrentActiveMenuContainsFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCurrentActiveMenu), v))
	})
}

// IgnoreKeepAliveEQ applies the EQ predicate on the "ignore_keep_alive" field.
func IgnoreKeepAliveEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIgnoreKeepAlive), v))
	})
}

// IgnoreKeepAliveNEQ applies the NEQ predicate on the "ignore_keep_alive" field.
func IgnoreKeepAliveNEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIgnoreKeepAlive), v))
	})
}

// IgnoreKeepAliveIsNil applies the IsNil predicate on the "ignore_keep_alive" field.
func IgnoreKeepAliveIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIgnoreKeepAlive)))
	})
}

// IgnoreKeepAliveNotNil applies the NotNil predicate on the "ignore_keep_alive" field.
func IgnoreKeepAliveNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIgnoreKeepAlive)))
	})
}

// HideTabEQ applies the EQ predicate on the "hide_tab" field.
func HideTabEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideTab), v))
	})
}

// HideTabNEQ applies the NEQ predicate on the "hide_tab" field.
func HideTabNEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHideTab), v))
	})
}

// HideTabIsNil applies the IsNil predicate on the "hide_tab" field.
func HideTabIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHideTab)))
	})
}

// HideTabNotNil applies the NotNil predicate on the "hide_tab" field.
func HideTabNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHideTab)))
	})
}

// FrameSrcEQ applies the EQ predicate on the "frame_src" field.
func FrameSrcEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcNEQ applies the NEQ predicate on the "frame_src" field.
func FrameSrcNEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcIn applies the In predicate on the "frame_src" field.
func FrameSrcIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFrameSrc), v...))
	})
}

// FrameSrcNotIn applies the NotIn predicate on the "frame_src" field.
func FrameSrcNotIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFrameSrc), v...))
	})
}

// FrameSrcGT applies the GT predicate on the "frame_src" field.
func FrameSrcGT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcGTE applies the GTE predicate on the "frame_src" field.
func FrameSrcGTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcLT applies the LT predicate on the "frame_src" field.
func FrameSrcLT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcLTE applies the LTE predicate on the "frame_src" field.
func FrameSrcLTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcContains applies the Contains predicate on the "frame_src" field.
func FrameSrcContains(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcHasPrefix applies the HasPrefix predicate on the "frame_src" field.
func FrameSrcHasPrefix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcHasSuffix applies the HasSuffix predicate on the "frame_src" field.
func FrameSrcHasSuffix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcIsNil applies the IsNil predicate on the "frame_src" field.
func FrameSrcIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFrameSrc)))
	})
}

// FrameSrcNotNil applies the NotNil predicate on the "frame_src" field.
func FrameSrcNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFrameSrc)))
	})
}

// FrameSrcEqualFold applies the EqualFold predicate on the "frame_src" field.
func FrameSrcEqualFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFrameSrc), v))
	})
}

// FrameSrcContainsFold applies the ContainsFold predicate on the "frame_src" field.
func FrameSrcContainsFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFrameSrc), v))
	})
}

// CarryParamEQ applies the EQ predicate on the "carry_param" field.
func CarryParamEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarryParam), v))
	})
}

// CarryParamNEQ applies the NEQ predicate on the "carry_param" field.
func CarryParamNEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCarryParam), v))
	})
}

// CarryParamIsNil applies the IsNil predicate on the "carry_param" field.
func CarryParamIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCarryParam)))
	})
}

// CarryParamNotNil applies the NotNil predicate on the "carry_param" field.
func CarryParamNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCarryParam)))
	})
}

// HideChildrenInMenuEQ applies the EQ predicate on the "hide_children_in_menu" field.
func HideChildrenInMenuEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHideChildrenInMenu), v))
	})
}

// HideChildrenInMenuNEQ applies the NEQ predicate on the "hide_children_in_menu" field.
func HideChildrenInMenuNEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHideChildrenInMenu), v))
	})
}

// HideChildrenInMenuIsNil applies the IsNil predicate on the "hide_children_in_menu" field.
func HideChildrenInMenuIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHideChildrenInMenu)))
	})
}

// HideChildrenInMenuNotNil applies the NotNil predicate on the "hide_children_in_menu" field.
func HideChildrenInMenuNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHideChildrenInMenu)))
	})
}

// AffixEQ applies the EQ predicate on the "affix" field.
func AffixEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAffix), v))
	})
}

// AffixNEQ applies the NEQ predicate on the "affix" field.
func AffixNEQ(v bool) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAffix), v))
	})
}

// AffixIsNil applies the IsNil predicate on the "affix" field.
func AffixIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAffix)))
	})
}

// AffixNotNil applies the NotNil predicate on the "affix" field.
func AffixNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAffix)))
	})
}

// DynamicLevelEQ applies the EQ predicate on the "dynamic_level" field.
func DynamicLevelEQ(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDynamicLevel), v))
	})
}

// DynamicLevelNEQ applies the NEQ predicate on the "dynamic_level" field.
func DynamicLevelNEQ(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDynamicLevel), v))
	})
}

// DynamicLevelIn applies the In predicate on the "dynamic_level" field.
func DynamicLevelIn(vs ...uint32) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDynamicLevel), v...))
	})
}

// DynamicLevelNotIn applies the NotIn predicate on the "dynamic_level" field.
func DynamicLevelNotIn(vs ...uint32) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDynamicLevel), v...))
	})
}

// DynamicLevelGT applies the GT predicate on the "dynamic_level" field.
func DynamicLevelGT(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDynamicLevel), v))
	})
}

// DynamicLevelGTE applies the GTE predicate on the "dynamic_level" field.
func DynamicLevelGTE(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDynamicLevel), v))
	})
}

// DynamicLevelLT applies the LT predicate on the "dynamic_level" field.
func DynamicLevelLT(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDynamicLevel), v))
	})
}

// DynamicLevelLTE applies the LTE predicate on the "dynamic_level" field.
func DynamicLevelLTE(v uint32) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDynamicLevel), v))
	})
}

// DynamicLevelIsNil applies the IsNil predicate on the "dynamic_level" field.
func DynamicLevelIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDynamicLevel)))
	})
}

// DynamicLevelNotNil applies the NotNil predicate on the "dynamic_level" field.
func DynamicLevelNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDynamicLevel)))
	})
}

// RealPathEQ applies the EQ predicate on the "real_path" field.
func RealPathEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRealPath), v))
	})
}

// RealPathNEQ applies the NEQ predicate on the "real_path" field.
func RealPathNEQ(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRealPath), v))
	})
}

// RealPathIn applies the In predicate on the "real_path" field.
func RealPathIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRealPath), v...))
	})
}

// RealPathNotIn applies the NotIn predicate on the "real_path" field.
func RealPathNotIn(vs ...string) predicate.Menu {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRealPath), v...))
	})
}

// RealPathGT applies the GT predicate on the "real_path" field.
func RealPathGT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRealPath), v))
	})
}

// RealPathGTE applies the GTE predicate on the "real_path" field.
func RealPathGTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRealPath), v))
	})
}

// RealPathLT applies the LT predicate on the "real_path" field.
func RealPathLT(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRealPath), v))
	})
}

// RealPathLTE applies the LTE predicate on the "real_path" field.
func RealPathLTE(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRealPath), v))
	})
}

// RealPathContains applies the Contains predicate on the "real_path" field.
func RealPathContains(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRealPath), v))
	})
}

// RealPathHasPrefix applies the HasPrefix predicate on the "real_path" field.
func RealPathHasPrefix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRealPath), v))
	})
}

// RealPathHasSuffix applies the HasSuffix predicate on the "real_path" field.
func RealPathHasSuffix(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRealPath), v))
	})
}

// RealPathIsNil applies the IsNil predicate on the "real_path" field.
func RealPathIsNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRealPath)))
	})
}

// RealPathNotNil applies the NotNil predicate on the "real_path" field.
func RealPathNotNil() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRealPath)))
	})
}

// RealPathEqualFold applies the EqualFold predicate on the "real_path" field.
func RealPathEqualFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRealPath), v))
	})
}

// RealPathContainsFold applies the ContainsFold predicate on the "real_path" field.
func RealPathContainsFold(v string) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRealPath), v))
	})
}

// HasRoles applies the HasEdge predicate on the "roles" edge.
func HasRoles() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RolesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRolesWith applies the HasEdge predicate on the "roles" edge with a given conditions (other predicates).
func HasRolesWith(preds ...predicate.Role) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RolesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, RolesTable, RolesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Menu) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChildrenTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Menu) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParam applies the HasEdge predicate on the "param" edge.
func HasParam() predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParamTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParamTable, ParamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParamWith applies the HasEdge predicate on the "param" edge with a given conditions (other predicates).
func HasParamWith(preds ...predicate.MenuParam) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ParamInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ParamTable, ParamColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Menu) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Menu) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Menu) predicate.Menu {
	return predicate.Menu(func(s *sql.Selector) {
		p(s.Not())
	})
}
