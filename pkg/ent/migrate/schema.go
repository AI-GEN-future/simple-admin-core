// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ApIsColumns holds the columns for the "ap_is" table.
	ApIsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "path", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "api_group", Type: field.TypeString},
		{Name: "method", Type: field.TypeString, Default: "POST"},
	}
	// ApIsTable holds the schema information for the "ap_is" table.
	ApIsTable = &schema.Table{
		Name:       "ap_is",
		Columns:    ApIsColumns,
		PrimaryKey: []*schema.Column{ApIsColumns[0]},
	}
	// DictionariesColumns holds the columns for the "dictionaries" table.
	DictionariesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeUint8, Nullable: true, Default: 0},
		{Name: "title", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "desc", Type: field.TypeString},
	}
	// DictionariesTable holds the schema information for the "dictionaries" table.
	DictionariesTable = &schema.Table{
		Name:       "dictionaries",
		Columns:    DictionariesColumns,
		PrimaryKey: []*schema.Column{DictionariesColumns[0]},
	}
	// DictionaryDetailsColumns holds the columns for the "dictionary_details" table.
	DictionaryDetailsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeUint8, Nullable: true, Default: 0},
		{Name: "title", Type: field.TypeString},
		{Name: "key", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "dictionary_dictionary_details", Type: field.TypeUint64, Nullable: true},
	}
	// DictionaryDetailsTable holds the schema information for the "dictionary_details" table.
	DictionaryDetailsTable = &schema.Table{
		Name:       "dictionary_details",
		Columns:    DictionaryDetailsColumns,
		PrimaryKey: []*schema.Column{DictionaryDetailsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "dictionary_details_dictionaries_dictionary_details",
				Columns:    []*schema.Column{DictionaryDetailsColumns[7]},
				RefColumns: []*schema.Column{DictionariesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MenusColumns holds the columns for the "menus" table.
	MenusColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "menu_level", Type: field.TypeUint32},
		{Name: "menu_type", Type: field.TypeUint32},
		{Name: "path", Type: field.TypeString, Nullable: true, Default: ""},
		{Name: "name", Type: field.TypeString},
		{Name: "redirect", Type: field.TypeString, Nullable: true, Default: ""},
		{Name: "component", Type: field.TypeString, Nullable: true, Default: ""},
		{Name: "order_no", Type: field.TypeUint32, Default: 0},
		{Name: "disabled", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "title", Type: field.TypeString},
		{Name: "icon", Type: field.TypeString},
		{Name: "hide_menu", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "hide_breadcrumb", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "current_active_menu", Type: field.TypeString, Nullable: true, Default: ""},
		{Name: "ignore_keep_alive", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "hide_tab", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "frame_src", Type: field.TypeString, Nullable: true, Default: ""},
		{Name: "carry_param", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "hide_children_in_menu", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "affix", Type: field.TypeBool, Nullable: true, Default: false},
		{Name: "dynamic_level", Type: field.TypeUint32, Nullable: true, Default: 20},
		{Name: "real_path", Type: field.TypeString, Nullable: true, Default: ""},
		{Name: "parent_id", Type: field.TypeUint64, Nullable: true},
	}
	// MenusTable holds the schema information for the "menus" table.
	MenusTable = &schema.Table{
		Name:       "menus",
		Columns:    MenusColumns,
		PrimaryKey: []*schema.Column{MenusColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "menus_menus_children",
				Columns:    []*schema.Column{MenusColumns[24]},
				RefColumns: []*schema.Column{MenusColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MenuParamsColumns holds the columns for the "menu_params" table.
	MenuParamsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeString},
		{Name: "key", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "menu_param", Type: field.TypeUint64, Nullable: true},
	}
	// MenuParamsTable holds the schema information for the "menu_params" table.
	MenuParamsTable = &schema.Table{
		Name:       "menu_params",
		Columns:    MenuParamsColumns,
		PrimaryKey: []*schema.Column{MenuParamsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "menu_params_menus_param",
				Columns:    []*schema.Column{MenuParamsColumns[6]},
				RefColumns: []*schema.Column{MenusColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OauthProvidersColumns holds the columns for the "oauth_providers" table.
	OauthProvidersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "client_id", Type: field.TypeString},
		{Name: "client_secret", Type: field.TypeString},
		{Name: "redirect_url", Type: field.TypeString},
		{Name: "scopes", Type: field.TypeString},
		{Name: "auth_url", Type: field.TypeString},
		{Name: "token_url", Type: field.TypeString},
		{Name: "auth_style", Type: field.TypeUint64},
		{Name: "info_url", Type: field.TypeString},
	}
	// OauthProvidersTable holds the schema information for the "oauth_providers" table.
	OauthProvidersTable = &schema.Table{
		Name:       "oauth_providers",
		Columns:    OauthProvidersColumns,
		PrimaryKey: []*schema.Column{OauthProvidersColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeUint8, Nullable: true, Default: 0},
		{Name: "name", Type: field.TypeString},
		{Name: "value", Type: field.TypeString, Unique: true},
		{Name: "default_router", Type: field.TypeString, Default: "dashboard"},
		{Name: "remark", Type: field.TypeString, Default: ""},
		{Name: "order_no", Type: field.TypeUint32, Default: 0},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// TokensColumns holds the columns for the "tokens" table.
	TokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeUint8, Nullable: true, Default: 0},
		{Name: "uuid", Type: field.TypeString},
		{Name: "token", Type: field.TypeString},
		{Name: "source", Type: field.TypeString},
		{Name: "expired_at", Type: field.TypeTime},
	}
	// TokensTable holds the schema information for the "tokens" table.
	TokensTable = &schema.Table{
		Name:       "tokens",
		Columns:    TokensColumns,
		PrimaryKey: []*schema.Column{TokensColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "token_uuid",
				Unique:  false,
				Columns: []*schema.Column{TokensColumns[4]},
			},
			{
				Name:    "token_expired_at",
				Unique:  false,
				Columns: []*schema.Column{TokensColumns[7]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUint64, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeUint8, Nullable: true, Default: 0},
		{Name: "uuid", Type: field.TypeString},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "nickname", Type: field.TypeString, Unique: true},
		{Name: "side_mode", Type: field.TypeString, Nullable: true, Default: "dark"},
		{Name: "base_color", Type: field.TypeString, Nullable: true, Default: "#fff"},
		{Name: "active_color", Type: field.TypeString, Nullable: true, Default: "#1890ff"},
		{Name: "role_id", Type: field.TypeUint64, Nullable: true, Default: 2},
		{Name: "mobile", Type: field.TypeString, Nullable: true},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "avatar", Type: field.TypeString, Nullable: true, Default: "", SchemaType: map[string]string{"mysql": "varchar(512)"}},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_username_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[5], UsersColumns[13]},
			},
		},
	}
	// RoleMenusColumns holds the columns for the "role_menus" table.
	RoleMenusColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeUint64},
		{Name: "menu_id", Type: field.TypeUint64},
	}
	// RoleMenusTable holds the schema information for the "role_menus" table.
	RoleMenusTable = &schema.Table{
		Name:       "role_menus",
		Columns:    RoleMenusColumns,
		PrimaryKey: []*schema.Column{RoleMenusColumns[0], RoleMenusColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_menus_role_id",
				Columns:    []*schema.Column{RoleMenusColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "role_menus_menu_id",
				Columns:    []*schema.Column{RoleMenusColumns[1]},
				RefColumns: []*schema.Column{MenusColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ApIsTable,
		DictionariesTable,
		DictionaryDetailsTable,
		MenusTable,
		MenuParamsTable,
		OauthProvidersTable,
		RolesTable,
		TokensTable,
		UsersTable,
		RoleMenusTable,
	}
)

func init() {
	DictionaryDetailsTable.ForeignKeys[0].RefTable = DictionariesTable
	MenusTable.ForeignKeys[0].RefTable = MenusTable
	MenuParamsTable.ForeignKeys[0].RefTable = MenusTable
	RoleMenusTable.ForeignKeys[0].RefTable = RolesTable
	RoleMenusTable.ForeignKeys[1].RefTable = MenusTable
}
