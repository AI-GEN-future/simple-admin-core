syntax = "v1"

info(
    title: "user management"
    desc: "user management api"
    author: "ryansu"
    email: "yuansu.china.work@gmail.com"
    version: "v1.0"
)

import "base.api"

type (
    LoginReq {
        Username   string `json:"username"`
        Password   string `json:"password"`
        CaptchaId  string `json:"captchaId"`
        Captcha    string `json:"captcha"`
    }

    LoginResp {
        UserId       string          `json:"userId"`
        Role         RoleInfoSimple  `json:"role"`
        Token        string          `json:"token"`
        Expire       uint64          `json:"expire"`
    }

    RoleInfoSimple {
        RoleName   string `json:"roleName"`
        Value      string `json:"value"`
    }

    RegisterReq {
        Username  string `json:"username"`
        Password  string `json:"password"`
        CaptchaId string `json:"captchaId"`
        Captcha   string `json:"captcha"`
        Email     string `json:"email"`
    }

    ChangePasswordReq {
        Username string    `json:"username"`
        Password string    `json:"password"`
        NewPassword string `json:"newPassword"`
    }

    ChangePasswordResp {
        BaseMsg
    }

    ModifyInfoReq {
        UserId       int64        `json:"userId"`
        Nickname     string       `json:"nickname"`
        Mobile       string       `json:"mobile"`
        RoleId       uint32       `json:"roleId"`
        Email        string       `json:"email"`
        Avatar       string       `json:"avatar"`
        SideMode     string       `json:"sideMode"`
    }

    UserInfoResp {
        Id           int64        `json:"id"`
        Username     string       `json:"username"`
        Nickname     string       `json:"nickname"`
        Mobile       string       `json:"mobile"`
        RoleId       uint32       `json:"roleId"`
        Email        string       `json:"email"`
        Avatar       string       `json:"avatar"`
        SideMode     string       `json:"sideMode"`
        Status       int32        `json:"status"`
        CreateAt     int64        `json:"createAt"`
        UpdateAt     int64        `json:"updateAt"`
    }

    GetUserInfoResp {
        UserId       string        `json:"userId"`
        Username     string       `json:"username"`
        Nickname     string       `json:"nickname"`
        Avatar       string       `json:"avatar"`
        Roles        GetUserRoleInfo `json:"roles"`
    }

    GetUserRoleInfo {
        RoleName   string `json:"roleName"`
        Value      string `json:"value"`
    }

    UserListResp {
        PageList
        Data    []UserInfoResp  `json:"data"`
    }

    PermCodeResp {
        Data []string `json:"data"`
    }

    CreateOrUpdateUserReq {
        Id           int64        `json:"id"`
        Username     string       `json:"username"`
        Nickname     string       `json:"nickname"`
        Password     string       `json:"password"`
        Mobile       string       `json:"mobile"`
        RoleId       uint32       `json:"roleId"`
        Email        string       `json:"email"`
        Avatar       string       `json:"avatar"`
        Status       int32        `json:"status"`
    }

    GetUserListReq {
        Page uint64 `json:"page"`
        PageSize uint64 `json:"pageSize"`
        Username string `json:"username"`
        Nickname string `json:"nickname"`
        Mobile string `json:"mobile"`
        Email string  `json:"email"`
        RoleId uint64 `json:"roleId"`
    }
)

@server(
    group: user
)

service core {
    @handler loginHandler
    post /user/login (LoginReq) returns (LoginResp)

    @handler registerHandler
    post /user/register (RegisterReq) returns (BaseResp)
}

@server(
    group : user
    jwt : Auth
    middleware: Authority
)

service core {
    @handler changePasswordHandler
    post /user/change-password (ChangePasswordReq) returns (ChangePasswordResp)

    // get base info when log in including role id and avatar
    @handler getUserInfoHandler
    get /user/info returns (GetUserInfoResp)

    @handler createOrUpdateUserHandler
    post /user (CreateOrUpdateUserReq) returns (SimpleMsg)

    @handler getUserListHandler
    post /user/list (GetUserListReq) returns (UserListResp)

    // for user self to update thier infomation
    @handler modifyUserHandler
    post /user/modify  (ModifyInfoReq) returns (SimpleMsg)

    @handler deleteUserHandler
    delete /user (IdReq) returns (SimpleMsg)

    // permission code is used to control the button shown in different role
    @handler getUserPermCodeHandler
    get /user/perm returns (PermCodeResp)
}
